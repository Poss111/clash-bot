name: Terraform

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tfe
    steps:
      - uses: FranzDiebold/github-env-vars-action@v2.1.0

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraformt
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_VAR_access_key="${{ secrets.AWS_SECRET_ID }}"
          export TF_VAR_secret_key="${{ secrets.AWS_SECRET_KEY }}"
          export TF_VAR_region="us-east-1"
          export TF_VAR_app_count="1"
          export TF_VAR_image_id="Pr-Build"
          export TF_VAR_prefix="clash-bot-discord"
          export TF_VAR_repository_name="discord-clash-bot
          export TF_VAR_iam_secret_policies="${{ secrets.IAM_SECRET_POLICIES }}"
          export TF_VAR_ecs_iam_secret_policies="${{ secrets.ECS_IAM_SECRET_POLICIES }}"
          export TF_VAR_ecs_cloudwatch_policies="${{ secrets.ECS_CLOUDWATCH_POLICIES }}"
          export TF_VAR_registry_ecr_iam_policies="${{ secrets.REGISTRY_ECR_IAM_POLICIES }}"
          export TF_VAR_ecr_specific_iam_policies="${{ secrets.ECR_SPECIFIC_IAM_POLICIES }}"
          export TF_VAR_one="${{ secrets.ONE }}"
          export TF_VAR_two="${{ secrets.TWO }}"
          export TF_VAR_three="${{ secrets.THREE }}"
          export TF_VAR_four="${{ secrets.FOUR }}"
          terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6.1.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `Clash Bot Workspace - Plan
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1