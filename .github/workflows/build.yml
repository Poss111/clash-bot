name: Build

on:
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'
      - 'tfe/**'

jobs:
  build:
    name: 'Build/Test Verification'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src

    steps:
    - uses: FranzDiebold/github-env-vars-action@v2.1.0

    - name: Build Start Discord Webhook
      uses: Poss111/discord-hook-action@v1.6.8
      with:
        discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        title: 'Clash Bot Build Notification'
        message: 'Starting Github build...'
        message-color: '15258703'

    - uses: actions/checkout@v2

    - name: Check
      run : echo build $GITHUB_RUN_NUMBER

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: .npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install Dependencies
      run: npm i

    - name: Run Linting
      id: lint
      run: npm run-script lint

    - name: Run unit tests
      id: unit
      run: npm test

    - name: Start App container
      run: docker-compose up -d

    - name: Run integration tests on Local DynamoDb
      id: integration
      run: npm run integration
      timeout-minutes: 2

    - uses: actions/upload-artifact@v2
      with:
        name: coverage-artifact
        path: coverage

    - name: Update Pull Request
      uses: actions/github-script@v6.1.0
      if: github.event_name == 'pull_request'
      env:
        LINT: "Lint\n${{ steps.lint.outputs.stdout }}"
        UNIT: "Unit\n${{ steps.unit.outputs.stdout }}"
        INTEGRATION: "Integration\n${{ steps.integration.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `Clash Bot Workspace - Build
          #### Lint üñå\`${{ steps.lint.outcome }}\`
          #### Test ‚öôÔ∏è\`${{ steps.unit.outcome }}\`
          #### Integration üìñ\`${{ steps.integration.outcome }}\`
          
          <details><summary>Show Lint Report</summary>

          \`\`\`\n
          ${process.env.LINT}
          \`\`\`

          </details>
          
          <details><summary>Show Unit Test Report</summary>

          \`\`\`\n
          ${process.env.UNIT}
          \`\`\`

          </details>
          
          <details><summary>Show Integration Test Report</summary>

          \`\`\`\n
          ${process.env.INTEGRATION}
          \`\`\`

          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Build Failed Discord Webhook
      uses: Poss111/discord-hook-action@v1.6.8
      if: ${{ failure() }}
      with:
        discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        title: 'Clash Bot Build Notification'
        message: 'Github build failed!'
        message-color: '16711680'

    - name: Build Succeeded Discord Webhook
      uses: Poss111/discord-hook-action@v1.6.8
      if: ${{ success() }}
      with:
        discord-hook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        title: 'Clash Bot Build Notification'
        message: |
          Github build succeeded!
          #### Lint üñå\`${{ steps.lint.outcome }}\`
          #### Test ‚öôÔ∏è\`${{ steps.unit.outcome }}\`
          #### Integration üìñ\`${{ steps.integration.outcome }}\`
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
        message-color: '65345'
